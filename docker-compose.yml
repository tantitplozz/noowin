version: '3.8'

services:
  api:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data # Persist data generated by the app
      - .:/app # Mount current directory to /app for development hot-reloading if app supports it
    env_file:
      - .env
    depends_on:
      - mongodb # Ensures mongodb starts before the api service
      # - chromadb # Uncomment if chromadb is run as a separate service
    networks:
      - omnicard-network
    # command: python main.py --mode api # Optional: override CMD in Dockerfile

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db # Persists MongoDB data
    networks:
      - omnicard-network
    # environment: # Optional: set MongoDB credentials here if needed
      # MONGO_INITDB_ROOT_USERNAME: user
      # MONGO_INITDB_ROOT_PASSWORD: password

  # Uncomment if you want to run ChromaDB as a separate service
  # chromadb:
  #   image: chromadb/chroma:latest # Use the official ChromaDB image
  #   ports:
  #     - "8001:8000" # Expose ChromaDB on a different host port if API uses 8000
  #   volumes:
  #     - chromadb_data:/chroma/chroma # Persist ChromaDB data
  #   networks:
  #     - omnicard-network

  frontend:
    build:
      context: ./frontend # Assumes your frontend app (e.g., React, Vue) is in a 'frontend' subdirectory
      dockerfile: Dockerfile # Assumes Dockerfile is present in ./frontend directory
    ports:
      - "5173:5173" # Default port for Vite React projects, adjust if different
    volumes:
      - ./frontend:/app # Mount frontend source for development hot-reloading
      - /app/node_modules # Use node_modules from within the container, not the host
    env_file:
      - .env # Frontend might also need API URLs or other env vars
    depends_on:
      - api # Ensures api service is available for the frontend
    networks:
      - omnicard-network
    # command: npm run dev # Or your frontend start command

networks:
  omnicard-network:
    driver: bridge

volumes:
  mongodb_data: # Named volume for MongoDB persistence
  # chromadb_data: # Uncomment if using a separate ChromaDB service

  ollama:
    image: ollama/ollama:latest
    container_name: ollama_service
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - omnicard_network

  chromadb:
    image: chromadb/chroma
    container_name: chromadb_persistent_data
    hostname: chromadb
    ports:
      - "8003:8000" # Changed host port to 8003, container still on 8000
    volumes:
      - ./data/chroma:/chroma/data # Persistent storage for ChromaDB
    networks:
      - omnicard_network
    restart: unless-stopped

volumes:
  ollama_data:
  chroma_data: # Ensure this matches the volume name used by chromadb service

networks:
  omnicard_network:
    driver: bridge 